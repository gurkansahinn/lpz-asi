////////////////////////////////////////////////////////////////////////////////
// Plugin-SDK project wizard
////////////////////////////////////////////////////////////////////////////////

gGameSA <- false;
gGameVC <- false;
gGameIII <- false;
gPluginName <- _T("");
gClassName <- _T("");
gPluginType <- 0; // 0 - ASI Plugin, 1 - CLEO Plugin, 2 - MoonLoader Module, 3 - DLL Library
gDirectX <- false;
gLACompatibility <- false;
gVersionSA_10US <- true;
gVersionSA_10EU <- false;
gVersionSA_11US <- false;
gVersionSA_11EU <- false;
gVersionSA_Steam <- false;
gVersionSA_SteamLV <- false;
gVersionVC_10 <- true;
gVersionVC_11 <- false;
gVersionVC_Steam <- false;
gVersionIII_10 <- true;
gVersionIII_11 <- false;
gVersionIII_Steam <- false;
gOutputDirectory <- _T("");
gReleaseIncludeDirs <- _T("");
gReleaseLibraryDirs <- _T("");
gReleaseDependencies <- _T("");
gReleaseDefinitions <- _T("");
gDebugSettingsSameAsRelease <- true;
gDebugIncludeDirs <- _T("");
gDebugLibraryDirs <- _T("");
gDebugDependencies <- _T("");
gDebugDefinitions <- _T("");
gPluginSdkDir <- _T("");
gGTASADir <- _T("");
gGTAVCDir <- _T("");
gGTA3Dir <- _T("");
gCleoSdkGTASADir <- _T("");
gCleoSdkGTAVCDir <- _T("");
gCleoSdkGTA3Dir <- _T("");
gMoonLoaderSdkGTASADir <- _T("");
gDirectXDir <- _T("");
gRwD3d9Dir <- _T("");

function BeginWizard() {
    Wizard.AddProjectPathPage();
    Wizard.AddPage(_T("basicSetup"));
    Wizard.AddPage(_T("releaseSettings"));
    Wizard.AddPage(_T("debugSettings"));
    Wizard.AddPage(_T("pathsSetup"));
}

function IsLibraryExtension(ext) {
    local extLower = ext.Lower();
    return extLower.Matches(_T("asi")) ||
           extLower.Matches(_T("cleo")) ||
           extLower.Matches(_T("flt")) ||
           extLower.Matches(_T("dll")) ||
           extLower.Matches(_T("sf"));
}

function GetFileNameExtension(filename) {
    local lastDotPosition = -1;
    for (local i = 0; i < filename.Length(); i++) {
        if (filename.GetChar(i) == '.')
            lastDotPosition = i;
    }
    if (lastDotPosition != -1) {
        local extensionLength = filename.Length() - lastDotPosition - 1;
        if (extensionLength > 0)
            return filename.Mid(lastDotPosition, extensionLength);
    }
    return _T("");
}

function RemoveTrailingSpaces(str) {
    local len = str.Length();
    if (len > 0) {
        local strEndPos = len;
        for (local i = len - 1; i >= 0; i -= 1) {
            local c = str.GetChar(i);
            if (c == ' ' || c == '\t')
                strEndPos = i;
            else
                return str.Mid(0, strEndPos);
        }
    }
    return _T("");
}

function IsQuotesStartOrEnd(line, pos) {
    if (line.GetChar(pos) == '"') {
        if (pos > 0) {
            local slashesCount = 0;
            for (local i = pos - 1; i >= 0; i -= 1) {
                local c = line.GetChar(i);
                if (c == '\\')
                    slashesCount += 1;
                else
                    return slashesCount % 2 == 0;
            }
            return slashesCount % 2 == 0;
        }
        return true;
    }
    return false;
}

function SplitListLine(line) {
    local entry = _T("");
    local ary = ::wxArrayString();
    local insideQuotes = false;
    for (local i = 0; i < line.Length(); i += 1) {
        local c = line.GetChar(i);
        if (!entry.IsEmpty()) {
            if (insideQuotes) {
                if (IsQuotesStartOrEnd(line, i)) {
                    insideQuotes = false;
                    entry += _T("\"\\\"");
                }
                else
                    entry.AddChar(c);
            }
            else {
                if (c == ';' || c == ',' || c == '\n' || c == '\r') {
                    ary.Add(RemoveTrailingSpaces(entry), 1);
                    entry = _T("");
                }
                else {
                    if (IsQuotesStartOrEnd(line, i)) {
                        insideQuotes = true;
                        entry += _T("\"\\\"");
                    }
                    else
                        entry.AddChar(c);
                }
            }
        }
        else {
            if (c != ';' && c != ',' && c != '\n' && c != '\r' && c != '\t' && c != ' ') {
                if (IsQuotesStartOrEnd(line, i)) {
                    insideQuotes = true;
                    entry += _T("\"\\\"");
                }
                else
                    entry.AddChar(c);
            }
        }
    }
    if (!entry.IsEmpty())
        ary.Add(RemoveTrailingSpaces(entry), 1);
    return ary;
}

function NormalisePath(path) {
    local newPath = path + _T("");
    newPath.Replace(_T("/"), _T("\\"), true);
    local len = newPath.Length();
    if (len > 0) {
        local c = newPath.GetChar(len - 1);
        if (c != '\\')
            newPath.AddChar('\\');
    }
    return newPath;
}

function StringReplace(str, what, to) {
    str.Replace(what, to, true);
    str.Replace(what.Upper(), to, true);
    str.Replace(what.Lower(), to, true);
}

function FormatName(name, defaultValue, projectName, projectDir, solutionDir, gameId, gameDir, outDirName, configName) {
    local newLine = name + _T("");
    if (newLine.IsEmpty())
        return defaultValue;
    StringReplace(newLine, _T("$ProjectName$"), projectName);
    StringReplace(newLine, _T("$ProjectDir$"), projectDir);
    StringReplace(newLine, _T("$SolutionDir$"), solutionDir);
    StringReplace(newLine, _T("$Config$"), configName);
    StringReplace(newLine, _T("$Game$"), gameId);
    StringReplace(newLine, _T("$GameLow$"), gameId.Lower());
    if (gameId.Matches(_T("SA"))) {
        StringReplace(newLine, _T("$GameName$"), _T("San Andreas"));
        StringReplace(newLine, _T("$GameAlt$"), _T("SA"));
        StringReplace(newLine, _T("$GameAltLow$"), _T("sa"));
    }
    else if (gameId.Matches(_T("VC"))) {
        StringReplace(newLine, _T("$GameName$"), _T("Vice City"));
        StringReplace(newLine, _T("$GameAlt$"), _T("VC"));
        StringReplace(newLine, _T("$GameAltLow$"), _T("vc"));
    }
    else if (gameId.Matches(_T("III"))) {
        StringReplace(newLine, _T("$GameName$"), _T("3"));
        StringReplace(newLine, _T("$GameAlt$"), _T("3"));
        StringReplace(newLine, _T("$GameAltLow$"), _T("3"));
    }
    else {
        StringReplace(newLine, _T("$GameName$"), _T(""));
        StringReplace(newLine, _T("$GameAlt$"), _T(""));
        StringReplace(newLine, _T("$GameAltLow$"), _T(""));
    }
    StringReplace(newLine, _T("$GameDir$"), gameDir);
    StringReplace(newLine, _T("$OutDirName$"), outDirName);
    return newLine;
}

function GetName(name, defaultValue) {
    local newLine = name + _T("");
    if (newLine.IsEmpty())
        return defaultValue;
    return newLine;
}

function GetConfigName(isDebug) {
    if (isDebug)
        return _T("Debug");
    return _T("Release");
}

function AddAdditionalToTarget(target, isDebug, projectName, gameAbbr, gameDir, outDirName, includeDirs, libraryDirs, libraries, defines) {
    local ary = SplitListLine(includeDirs);
    for (local i = 0; i < ary.GetCount(); i += 1)
        target.AddIncludeDir(FormatName(ary.Item(i), _T(""), projectName, _T("$(PROJECT_DIR)"), _T("$(WORKSPACE_DIR)"), gameAbbr, gameDir, outDirName, GetConfigName(isDebug)));
    ary = SplitListLine(libraryDirs);
    for (local i = 0; i < ary.GetCount(); i += 1)
        target.AddLibDir(FormatName(ary.Item(i), _T(""), projectName, _T("$(PROJECT_DIR)"), _T("$(WORKSPACE_DIR)"), gameAbbr, gameDir, outDirName, GetConfigName(isDebug)));
    ary = SplitListLine(libraries);
    for (local i = 0; i < ary.GetCount(); i += 1)
        target.AddLinkLib(FormatName(ary.Item(i), _T(""), projectName, _T(""), _T(""), gameAbbr, _T(""), _T(""), GetConfigName(isDebug)));
    ary = SplitListLine(defines);
    for (local i = 0; i < ary.GetCount(); i += 1)
        target.AddCompilerOption(_T("-D") + FormatName(ary.Item(i), _T(""), _T(""), projectName, _T(""), gameAbbr, _T(""), _T(""), GetConfigName(isDebug)));
}

function CreateNewBuildTarget(project, targetName, gameId, isDebug) {
    local gameAbbr = gameId.Upper();
    local gameAbbrLow = gameId.Lower();
    local projectName = GetFixedProjectName(Wizard.GetProjectName());
    local baseTargetName = Wizard.GetReleaseName();
    if (isDebug)
        baseTargetName = Wizard.GetDebugName();
    local target = project.DuplicateBuildTarget(baseTargetName, targetName);
    if (IsNull(target))
        return;
    target.SetTargetType(ttDynamicLib);
    target.SetCreateStaticLib(false);
    target.SetCreateDefFile(false);
    target.SetWorkingDir(_T("."));
    if (isDebug)
        target.SetObjectOutput(_T(".obj\\Debug"));
    else
        target.SetObjectOutput(_T(".obj\\Release"));
    target.SetTargetFilenameGenerationPolicy(tgfpNone, tgfpNone);
    target.AddCompilerOption(_T("-m32"));
    target.AddCompilerOption(_T("-fpermissive"));
    target.AddCompilerOption(_T("-std=gnu++17"));
    target.AddLinkerOption(_T("-static-libgcc"));
    target.AddLinkerOption(_T("-static-libstdc++"));
    local configName = GetConfigName(isDebug);
    if (isDebug) {
        DebugSymbolsOn(target, Wizard.GetCompilerID());
        target.AddCompilerOption(_T("-D_DEBUG"));
    }
    else {
        OptimizationsOn(target, Wizard.GetCompilerID());
        target.AddCompilerOption(_T("-DNDEBUG"));
    }
    local gameDir;
    local outDirName;
    if (gameAbbr.Matches(_T("SA")))
        gameDir = GetName(gGTASADir, _T("$(GTA_SA_DIR)"));
    else if (gameAbbr.Matches(_T("VC")))
        gameDir = GetName(gGTAVCDir, _T("$(GTA_VC_DIR)"));
    else
        gameDir = GetName(gGTA3Dir, _T("$(GTA_III_DIR)"));

    if (gPluginType == 0) // ASI Plugin
        outDirName = _T("scripts");
    else if (gPluginType == 1) // CLEO Plugin
        outDirName = _T("cleo");
    else if (gPluginType == 2) // MoonLoader Module
        outDirName = _T("moonloader\\lib");
    else // DLL Library
        outDirName = _T("");
    local outputDir = FormatName(gOutputDirectory, _T("$(WORKSPACE_DIR)\\output"), projectName, _T("$(PROJECT_DIR)"), _T("$(WORKSPACE_DIR)"), gameAbbr, gameDir, outDirName, configName);
    outputDir = NormalisePath(outputDir);
    local targetName = FormatName(gPluginName, projectName + _T(".") + gameAbbr, projectName, _T(""), _T(""), gameAbbr, _T(""), _T(""), configName);
    local targetExt;
    local fileExt = GetFileNameExtension(targetName);
    if (!fileExt.IsEmpty() && IsLibraryExtension(fileExt)) {
        targetExt = fileExt + _T("");
        targetName = targetName.Mid(0, targetName.Length() - fileExt.Length());
    }
    else {
        if (gPluginType == 1) // CLEO Plugin
            targetExt = _T("cleo");
        else if (gPluginType == 2 || gPluginType == 3) // MoonLoader Module or DLL Library
            targetExt = _T("dll");
        else // ASI Plugin
            targetExt = _T("asi");
    }
    if (isDebug)
        targetName += _T("_d");
    target.SetOutputFilename(outputDir + targetName + _T(".") + targetExt);
    local pluginSdkDir = GetName(gPluginSdkDir, _T("$(PLUGIN_SDK_DIR)"));
    pluginSdkDir = NormalisePath(pluginSdkDir);
    target.AddIncludeDir(pluginSdkDir + _T("plugin_") + gameAbbrLow + _T("\\"));
    target.AddIncludeDir(pluginSdkDir + _T("plugin_") + gameAbbrLow + _T("\\game_") + gameAbbrLow + _T("\\"));
    target.AddIncludeDir(pluginSdkDir + _T("shared\\"));
    target.AddIncludeDir(pluginSdkDir + _T("shared\\game\\"));
    target.AddLibDir(pluginSdkDir + _T("output\\mingw\\lib\\"));
    local pluginLibName = _T("plugin");
    if (!gameAbbr.Matches(_T("SA")))
        pluginLibName += _T("_") + gameAbbrLow;
    if (isDebug)
        pluginLibName += _T("_d");
    target.AddLinkLib(pluginLibName);
    if (gameAbbr.Matches(_T("SA"))) {
        target.AddCompilerOption(_T("-DGTASA"));
        target.AddCompilerOption(_T("-DGTAGAME_NAME=\"\\\"San Andreas\"\\\""));
        target.AddCompilerOption(_T("-DGTAGAME_ABBR=\"\\\"SA\"\\\""));
        target.AddCompilerOption(_T("-DGTAGAME_ABBRLOW=\"\\\"sa\"\\\""));
        target.AddCompilerOption(_T("-DGTAGAME_PROTAGONISTNAME=\"\\\"CJ\"\\\""));
        target.AddCompilerOption(_T("-DGTAGAME_CITYNAME=\"\\\"San Andreas\"\\\""));
    }
    else if (gameAbbr.Matches(_T("VC"))) {
        target.AddCompilerOption(_T("-DGTAVC"));
        target.AddCompilerOption(_T("-DGTAGAME_NAME=\"\\\"Vice City\"\\\""));
        target.AddCompilerOption(_T("-DGTAGAME_ABBR=\"\\\"VC\"\\\""));
        target.AddCompilerOption(_T("-DGTAGAME_ABBRLOW=\"\\\"vc\"\\\""));
        target.AddCompilerOption(_T("-DGTAGAME_PROTAGONISTNAME=\"\\\"Tommy\"\\\""));
        target.AddCompilerOption(_T("-DGTAGAME_CITYNAME=\"\\\"Vice City\"\\\""));
    }
    else {
        target.AddCompilerOption(_T("-DGTA3"));
        target.AddCompilerOption(_T("-DGTAGAME_NAME=\"\\\"3\"\\\""));
        target.AddCompilerOption(_T("-DGTAGAME_ABBR=\"\\\"3\"\\\""));
        target.AddCompilerOption(_T("-DGTAGAME_ABBRLOW=\"\\\"3\"\\\""));
        target.AddCompilerOption(_T("-DGTAGAME_PROTAGONISTNAME=\"\\\"Claude\"\\\""));
        target.AddCompilerOption(_T("-DGTAGAME_CITYNAME=\"\\\"Liberty City\"\\\""));
    }
    if (gDirectX) {
        local dxSdkDir = GetName(gDirectXDir, _T("$(DIRECTX9_SDK_DIR)"));
        dxSdkDir = NormalisePath(dxSdkDir);
        target.AddIncludeDir(dxSdkDir + _T("Include\\"));
        target.AddLibDir(dxSdkDir + _T("Lib\\x86\\"));
        target.AddLinkLib(_T("d3d9"));
        target.AddLinkLib(_T("d3dx9"));
        if (gameAbbr.Matches(_T("VC")) || gameAbbr.Matches(_T("III"))) {
            local rwD3D9Dir = GetName(gRwD3d9Dir, _T("$(RWD3D9_DIR)"));
            rwD3D9Dir = NormalisePath(rwD3D9Dir);
            target.AddIncludeDir(rwD3D9Dir + _T("source\\"));
            target.AddLibDir(rwD3D9Dir + _T("libs\\"));
            target.AddLinkLib(_T("rwd3d9"));
        }
        target.AddCompilerOption(_T("-D_DX9_SDK_INSTALLED"));
    }
    if (gPluginType == 1) { // CLEO Plugin
        local cleoSdkDirPath = _T("");
        if (gameAbbr.Matches(_T("SA"))) {
            target.AddLinkLib(_T("cleo"));
            cleoSdkDirPath = gCleoSdkGTASADir + _T("");
        }
        else {
            target.AddLinkLib(gameAbbr + _T(".CLEO"));
            if (gameAbbr.Matches(_T("VC")))
                cleoSdkDirPath = gCleoSdkGTAVCDir + _T("");
            else
                cleoSdkDirPath = gCleoSdkGTA3Dir + _T("");
        }
        local cleoSdkDir = GetName(cleoSdkDirPath, _T("$(CLEO_SDK_") + gameAbbr + _T("_DIR)"));
        cleoSdkDir = NormalisePath(cleoSdkDir);
        target.AddIncludeDir(cleoSdkDir);
        target.AddLibDir(cleoSdkDir);
    }
    else if (gPluginType == 2) { // MoonLoader Module
        local moonloaderSdkDir = GetName(gMoonLoaderSdkGTASADir, _T("$(MOONLOADER_SDK_SA_DIR)"));
        moonloaderSdkDir = NormalisePath(moonloaderSdkDir);
        target.AddIncludeDir(moonloaderSdkDir + _T("src\\"));
        target.AddIncludeDir(moonloaderSdkDir + _T("src\\libs\\lua\\"));
        target.AddIncludeDir(moonloaderSdkDir + _T("src\\libs\\sol2\\"));
        target.AddLibDir(moonloaderSdkDir + _T("src\\libs\\lua\\"));
        target.AddLinkLib(_T("lua51"));
        target.AddCompilerOption(_T("-DLUA_BUILD_AS_DLL"));
        target.AddCompilerOption(_T("-DMODULE_NAME=\"") + GetFixedProjectName(Wizard.GetProjectName()) + _T("\""));
    }
    if (gLACompatibility)
        target.AddCompilerOption(_T("-D_PLUGIN_LA_COMP"));
    if (gameAbbr.Matches(_T("SA"))) {
        if (gVersionSA_10US)
            target.AddCompilerOption(_T("-DPLUGIN_SGV_10US"));
        if (gVersionSA_10EU)
            target.AddCompilerOption(_T("-DPLUGIN_SGV_10EU"));
        if (gVersionSA_11US)
            target.AddCompilerOption(_T("-DPLUGIN_SGV_11US"));
        if (gVersionSA_11EU)
            target.AddCompilerOption(_T("-DPLUGIN_SGV_11EU"));
        if (gVersionSA_Steam)
            target.AddCompilerOption(_T("-DPLUGIN_SGV_SR2"));
        if (gVersionSA_SteamLV)
            target.AddCompilerOption(_T("-DPLUGIN_SGV_SR2LV"));
    }
    else if (gameAbbr.Matches(_T("VC"))) {
        if (gVersionVC_10)
            target.AddCompilerOption(_T("-DPLUGIN_SGV_10EN"));
        if (gVersionVC_11)
            target.AddCompilerOption(_T("-DPLUGIN_SGV_11EN"));
        if (gVersionVC_Steam)
            target.AddCompilerOption(_T("-DPLUGIN_SGV_STEAM"));
    }
    else {
        if (gVersionIII_10)
            target.AddCompilerOption(_T("-DPLUGIN_SGV_10EN"));
        if (gVersionIII_11)
            target.AddCompilerOption(_T("-DPLUGIN_SGV_11EN"));
        if (gVersionIII_Steam)
            target.AddCompilerOption(_T("-DPLUGIN_SGV_STEAM"));
    }
    if (!isDebug || gDebugSettingsSameAsRelease)
        AddAdditionalToTarget(target, isDebug, projectName, gameAbbr, gameDir, outDirName, gReleaseIncludeDirs, gReleaseLibraryDirs, gReleaseDependencies, gReleaseDefinitions);
    else
        AddAdditionalToTarget(target, isDebug, projectName, gameAbbr, gameDir, outDirName, gDebugIncludeDirs, gDebugLibraryDirs, gDebugDependencies, gDebugDefinitions);
}

function SetupProject(project) {
    if (gGameSA) {
        CreateNewBuildTarget(project, _T("GTASA Release"), _T("SA"), false);
        CreateNewBuildTarget(project, _T("GTASA Debug"), _T("SA"), true);
    }
    if (gGameVC) {
        CreateNewBuildTarget(project, _T("GTAVC Release"), _T("VC"), false);
        CreateNewBuildTarget(project, _T("GTAVC Debug"), _T("VC"), true);
    }
    if (gGameIII) {
        CreateNewBuildTarget(project, _T("GTA3 Release"), _T("III"), false);
        CreateNewBuildTarget(project, _T("GTA3 Debug"), _T("III"), true);
    }
    project.RemoveBuildTarget(Wizard.GetDebugName());
    project.RemoveBuildTarget(Wizard.GetReleaseName());
    if (gPluginType == 2) { // MoonLoader Module
        local pchfile = project.GetFileByFilename(_T("pch.h"), true, true);
        if (!IsNull(pchfile)) {
            pchfile.compile = true;
            pchfile.link = false;
            pchfile.weight = 0;
            project.SetModeForPCH(pchSourceDir);
            project.AddCompilerOption(_T("-Winvalid-pch"));
            project.AddCompilerOption(_T("-include pch.h"));
        }
    }
    return true;
}

function GetCodeFromFile(filepath, projname, className, instanceName) {
    local code = IO.ReadFileContents(Wizard.FindTemplateFile(filepath));
    code.Replace(_T("$projname$"), projname);
    code.Replace(_T("$classname$"), className);
    code.Replace(_T("$classinstancename$"), instanceName);
    return code;
}

function GetGeneratedFile(file_index) {
    local projname = GetFixedProjectName(Wizard.GetProjectName());
    local className = FormatName(gClassName, projname, projname, _T(""), _T(""), _T(""), _T(""), _T(""), _T(""));
    className = GetFixedProjectName(className);
    local instanceName;
    if (className.GetChar(0) >= 'A' && className.GetChar(0) <= 'Z') {
        local lowerLetter = _T("");
        lowerLetter.AddChar(className.GetChar(0));
        lowerLetter = lowerLetter.Lower();
        instanceName = lowerLetter + className.Mid(1, className.Length() - 1);
    }
    else {
        if (className.GetChar(0) == '_')
            instanceName = className + _T("_inst");
        else
            instanceName = _T("_") + className;
    }
    if (file_index == 0) {
        local path;
        if (gPluginType == 1 && gGameSA && !gGameVC && !gGameIII) // CLEO Plugin
            path = _T("pluginsdk/files/Main.Cleo.SA.cpp");
        else if (gPluginType == 2 && gGameSA && !gGameVC && !gGameIII) // MoonLoader Module
            path = _T("pluginsdk/files/Main.MoonLoader.SA.cpp");
        else
            path = _T("pluginsdk/files/Main.Asi.cpp");
        return projname + _T(".cpp;") + GetCodeFromFile(path, projname, className, instanceName);
    }
    else if (file_index == 1 && gPluginType == 2) // MoonLoader Module
        return _T("pch.h;") + GetCodeFromFile(_T("pluginsdk/files/Pch.MoonLoader.h"), projname, className, instanceName);
    return _T("");
}

////////////////////////////////////////////////////////////////////////////////
// Basic setup page
////////////////////////////////////////////////////////////////////////////////

function AnyGameChecked() {
    return Wizard.IsCheckboxChecked(_T("chkGTASA")) || Wizard.IsCheckboxChecked(_T("chkGTAVC")) || Wizard.IsCheckboxChecked(_T("chkGTA3"));
}

function SwitchSAVersions(enable) {
    Wizard.EnableWindow(_T("btmGTASA_small"), enable);
    Wizard.EnableWindow(_T("chkVersionSA_10EU"), enable);
    Wizard.EnableWindow(_T("chkVersionSA_11US"), enable);
    Wizard.EnableWindow(_T("chkVersionSA_11EU"), enable);
    Wizard.EnableWindow(_T("chkVersionSA_Steam"), enable);
    Wizard.EnableWindow(_T("chkVersionSA_SteamLV"), enable);
}

function SwitchVCVersions(enable) {
    Wizard.EnableWindow(_T("btmGTAVC_small"), enable);
    Wizard.EnableWindow(_T("chkVersionVC_11"), enable);
    Wizard.EnableWindow(_T("chkVersionVC_Steam"), enable);
}

function SwitchIIIVersions(enable) {
    Wizard.EnableWindow(_T("btmGTA3_small"), enable);
    Wizard.EnableWindow(_T("chkVersionIII_11"), enable);
    Wizard.EnableWindow(_T("chkVersionIII_Steam"), enable);
}

function BasicSetupSwitchComponents(enable) {
    Wizard.EnableWindow(_T("sttPluginType"), enable);
    Wizard.EnableWindow(_T("cmbPluginType"), enable);
    Wizard.EnableWindow(_T("sttPluginName"), enable);
    Wizard.EnableWindow(_T("txtPluginName"), enable);
    Wizard.EnableWindow(_T("sttClassName"), enable);
    Wizard.EnableWindow(_T("txtClassName"), enable);
    Wizard.EnableWindow(_T("chkCleoPlugin"), enable);
    Wizard.EnableWindow(_T("chkCleoSdk"), enable);
    Wizard.EnableWindow(_T("chkUseDirectX"), enable);
    Wizard.EnableWindow(_T("chkLACompatibility"), enable);
    Wizard.EnableWindow(_T("sttGameVersions"), enable);
    Wizard.EnableWindow(_T("sttOutputDirectory"), enable);
    Wizard.EnableWindow(_T("txtOutputDirectory"), enable);
    Wizard.EnableWindow(_T("btnGameFolder"), enable);
    Wizard.EnableWindow(_T("btnProjectFolder"), enable);
}

function BasicSetupCheckForComponentsSwitch(thisCheckbox, secondCheckbox, thirdCheckbox) {
    if (Wizard.IsCheckboxChecked(thisCheckbox)) {
        if (!Wizard.IsCheckboxChecked(secondCheckbox) && !Wizard.IsCheckboxChecked(thirdCheckbox))
            BasicSetupSwitchComponents(true);
    }
    else {
        if (!Wizard.IsCheckboxChecked(secondCheckbox) && !Wizard.IsCheckboxChecked(thirdCheckbox))
            BasicSetupSwitchComponents(false);
    }
}

function OnClick_chkGTASA() {
    BasicSetupCheckForComponentsSwitch(_T("chkGTASA"), _T("chkGTAVC"), _T("chkGTA3"));
    SwitchSAVersions(Wizard.IsCheckboxChecked(_T("chkGTASA")));
}

function OnClick_chkGTAVC() {
    if (Wizard.GetComboboxSelection(_T("cmbPluginType")) == 2 && Wizard.IsCheckboxChecked(_T("chkGTAVC"))) {
        if (!Wizard.IsCheckboxChecked(_T("chkGTASA"))) {
            Wizard.SetComboboxSelection(_T("cmbPluginType"), 0);
            gPluginType = 0; // ASI Plugin
        }
        else {
            Wizard.CheckCheckbox(_T("chkGTAVC"), false);
            ShowWarning(_T("MoonLoader Module can't be created for GTA Vice City"));
        }
    }
    BasicSetupCheckForComponentsSwitch(_T("chkGTAVC"), _T("chkGTASA"), _T("chkGTA3"));
    SwitchVCVersions(Wizard.IsCheckboxChecked(_T("chkGTAVC")));
}

function OnClick_chkGTA3() {
    if (Wizard.GetComboboxSelection(_T("cmbPluginType")) == 2 && Wizard.IsCheckboxChecked(_T("chkGTA3"))) {
        if (!Wizard.IsCheckboxChecked(_T("chkGTASA"))) {
            Wizard.SetComboboxSelection(_T("cmbPluginType"), 0);
            gPluginType = 0; // ASI Plugin
        }
        else {
            Wizard.CheckCheckbox(_T("chkGTA3"), false);
            ShowWarning(_T("MoonLoader Module can't be created for GTA 3"));
        }
    }
    BasicSetupCheckForComponentsSwitch(_T("chkGTA3"), _T("chkGTASA"), _T("chkGTAVC"));
    SwitchIIIVersions(Wizard.IsCheckboxChecked(_T("chkGTA3")));
}

function OnClick_cmbPluginType() {
    local selectedItemId = Wizard.GetComboboxSelection(_T("cmbPluginType"));
    if (selectedItemId == 2 && !Wizard.IsCheckboxChecked(_T("chkGTASA"))) {
        Wizard.SetComboboxSelection(_T("cmbPluginType"), gPluginType);
        ShowWarning(_T("MoonLoader Module can be created for GTA San Andreas only"));
    }
    else if (selectedItemId == 2 && (Wizard.IsCheckboxChecked(_T("chkGTAVC")) || Wizard.IsCheckboxChecked(_T("chkGTA3")))) {
        Wizard.SetComboboxSelection(_T("cmbPluginType"), gPluginType);
        local errMessage = _T("MoonLoader Module can't be created for ");
        if (Wizard.IsCheckboxChecked(_T("chkGTA3")))
            errMessage += _T("GTA 3");
        if (Wizard.IsCheckboxChecked(_T("chkGTAVC"))) {
            if (Wizard.IsCheckboxChecked(_T("chkGTA3")))
                errMessage += _T(" and ");
            errMessage += _T("GTA Vice City");
        }
        ShowWarning(errMessage);
    }
    else
        gPluginType = selectedItemId;
}

function OnClick_btnGameFolder() {
    Wizard.SetTextControlValue(_T("txtOutputDirectory"), _T("$gamedir$\\$outdirname$"));
}

function OnClick_btnProjectFolder() {
    Wizard.SetTextControlValue(_T("txtOutputDirectory"), _T("$solutiondir$\\output"));
}

function OnLeave_basicSetup(forward) {
    if (forward) {
        if (!AnyGameChecked()) {
            ShowWarning(_T("Please select target game(s)"));
            return false;
        }
        gPluginType = Wizard.GetComboboxSelection(_T("cmbPluginType"));
        if (forward && gPluginType == -1) {
            ShowWarning(_T("Please select plugin type"));
            return false;
        }
    }
    gGameSA = Wizard.IsCheckboxChecked(_T("chkGTASA"));
    gGameVC = Wizard.IsCheckboxChecked(_T("chkGTAVC"));
    gGameIII = Wizard.IsCheckboxChecked(_T("chkGTA3"));
    gPluginName = Wizard.GetTextControlValue(_T("txtPluginName"));
    gClassName = Wizard.GetTextControlValue(_T("txtClassName"));
    gDirectX = Wizard.IsCheckboxChecked(_T("chkUseDirectX"));
    gLACompatibility = Wizard.IsCheckboxChecked(_T("chkLACompatibility"));
    gOutputDirectory = Wizard.GetTextControlValue(_T("txtOutputDirectory"));
    return true;
}

////////////////////////////////////////////////////////////////////////////////
//
// Release settings page
//
////////////////////////////////////////////////////////////////////////////////

function OnLeave_releaseSettings(forward) {
    gReleaseIncludeDirs = Wizard.GetTextControlValue(_T("txtReleaseAdditionalIncludeDirs"));
    gReleaseLibraryDirs = Wizard.GetTextControlValue(_T("txtReleaseAdditionalLibraryDirs"));
    gReleaseDependencies = Wizard.GetTextControlValue(_T("txtReleaseAdditionalDependencies"));
    gReleaseDefinitions = Wizard.GetTextControlValue(_T("txtReleaseAdditionalPreprocessorDefinitions"));
    return true;
}

////////////////////////////////////////////////////////////////////////////////
// Debug settings page
////////////////////////////////////////////////////////////////////////////////

function DebugSettingsCopyFromRelease() {
    Wizard.SetTextControlValue(_T("txtDebugAdditionalIncludeDirs"), gReleaseIncludeDirs);
    Wizard.SetTextControlValue(_T("txtDebugAdditionalLibraryDirs"), gReleaseLibraryDirs);
    Wizard.SetTextControlValue(_T("txtDebugAdditionalDependencies"), gReleaseDependencies);
    Wizard.SetTextControlValue(_T("txtDebugAdditionalPreprocessorDefinitions"), gReleaseDefinitions);
}

function DebugSettingsSwitchComponents(enable) {
    Wizard.EnableWindow(_T("sttDebugAdditionalIncludeDirs"), enable);
    Wizard.EnableWindow(_T("txtDebugAdditionalIncludeDirs"), enable);
    Wizard.EnableWindow(_T("sttDebugAdditionalLibraryDirs"), enable);
    Wizard.EnableWindow(_T("txtDebugAdditionalLibraryDirs"), enable);
    Wizard.EnableWindow(_T("sttDebugAdditionalDependencies"), enable);
    Wizard.EnableWindow(_T("txtDebugAdditionalDependencies"), enable);
    Wizard.EnableWindow(_T("sttDebugAdditionalPreprocessorDefinitions"), enable);
    Wizard.EnableWindow(_T("txtDebugAdditionalPreprocessorDefinitions"), enable);
}

function OnClick_chkDebugSettingsSameAsRelease() {
    if (Wizard.IsCheckboxChecked(_T("chkDebugSettingsSameAsRelease")))
        DebugSettingsSwitchComponents(false);
    else
        DebugSettingsSwitchComponents(true);
    DebugSettingsCopyFromRelease();
}

function OnEnter_debugSettings(forward) {
    if (forward && Wizard.IsCheckboxChecked(_T("chkDebugSettingsSameAsRelease")))
        DebugSettingsCopyFromRelease();
}

function OnLeave_debugSettings(forward) {
    gDebugSettingsSameAsRelease = Wizard.IsCheckboxChecked(_T("chkDebugSettingsSameAsRelease"));
    gDebugIncludeDirs = Wizard.GetTextControlValue(_T("txtDebugAdditionalIncludeDirs"));
    gDebugLibraryDirs = Wizard.GetTextControlValue(_T("txtDebugAdditionalLibraryDirs"));
    gDebugDependencies = Wizard.GetTextControlValue(_T("txtDebugAdditionalDependencies"));
    gDebugDefinitions = Wizard.GetTextControlValue(_T("txtDebugAdditionalPreprocessorDefinitions"));
    return true;
}

////////////////////////////////////////////////////////////////////////////////
// Setup paths page
////////////////////////////////////////////////////////////////////////////////

function OnClick_btnUseEnvVars() {
    Wizard.SetTextControlValue(_T("txtPluginSdkDir"), _T("$(PLUGIN_SDK_DIR)"));
    Wizard.SetTextControlValue(_T("txtGtaSaDir"), _T("$(GTA_SA_DIR)"));
    Wizard.SetTextControlValue(_T("txtGtaVcDir"), _T("$(GTA_VC_DIR)"));
    Wizard.SetTextControlValue(_T("txtGta3Dir"), _T("$(GTA_III_DIR)"));
    Wizard.SetTextControlValue(_T("txtCleoSdkSaDir"), _T("$(CLEO_SDK_SA_DIR)"));
    Wizard.SetTextControlValue(_T("txtCleoSdkVcDir"), _T("$(CLEO_SDK_VC_DIR)"));
    Wizard.SetTextControlValue(_T("txtCleoSdk3Dir"), _T("$(CLEO_SDK_III_DIR)"));
    Wizard.SetTextControlValue(_T("txtMoonLoaderSdkDir"), _T("$(MOONLOADER_SDK_SA_DIR)"));
    Wizard.SetTextControlValue(_T("txtDirectXSdkDir"), _T("$(DIRECTX9_SDK_DIR)"));
    Wizard.SetTextControlValue(_T("txtRwD3d9Dir"), _T("$(RWD3D9_DIR)"));
}

function PathsSetupSwitchComponentsForGame(enable, gameDirCompName, cleoSdkDirCompName) {
    if (enable) {
        local wantsGameDir = gOutputDirectory.Find(_T("$gamedir$")) != -1;
        Wizard.EnableWindow(_T("stt") + gameDirCompName, wantsGameDir);
        Wizard.EnableWindow(_T("txt") + gameDirCompName, wantsGameDir);
        Wizard.EnableWindow(_T("stt") + cleoSdkDirCompName, gPluginType == 1); // CLEO Plugin
        Wizard.EnableWindow(_T("txt") + cleoSdkDirCompName, gPluginType == 1); // CLEO Plugin
    }
    else {
        Wizard.EnableWindow(_T("stt") + gameDirCompName, false);
        Wizard.EnableWindow(_T("txt") + gameDirCompName, false);
        Wizard.EnableWindow(_T("stt") + cleoSdkDirCompName, false);
        Wizard.EnableWindow(_T("txt") + cleoSdkDirCompName, false);
    }
}

function PathsSetupSwitchMoonLoader(enable) {
    Wizard.EnableWindow(_T("sttMoonLoaderSdkDir"), enable);
    Wizard.EnableWindow(_T("txtMoonLoaderSdkDir"), enable);
}

function PathsSetupSwitchDirectX(enable) {
    Wizard.EnableWindow(_T("sttDirectXSdkDir"), enable);
    Wizard.EnableWindow(_T("txtDirectXSdkDir"), enable);
}

function PathsSetupSwitchRwD3D9(enable) {
    Wizard.EnableWindow(_T("sttRwD3d9Dir"), enable);
    Wizard.EnableWindow(_T("txtRwD3d9Dir"), enable);
}

function OnLeave_pathsSetup(forward) {
    gPluginSdkDir = Wizard.GetTextControlValue(_T("txtPluginSdkDir"));
    gGTASADir = Wizard.GetTextControlValue(_T("txtGtaSaDir"));
    gGTAVCDir = Wizard.GetTextControlValue(_T("txtGtaVcDir"));
    gGTA3Dir = Wizard.GetTextControlValue(_T("txtGta3Dir"));
    gCleoSdkGTASADir = Wizard.GetTextControlValue(_T("txtCleoSdkSaDir"));
    gCleoSdkGTAVCDir = Wizard.GetTextControlValue(_T("txtCleoSdkVcDir"));
    gCleoSdkGTA3Dir = Wizard.GetTextControlValue(_T("txtCleoSdk3Dir"));
    gMoonLoaderSdkGTASADir = Wizard.GetTextControlValue(_T("txtMoonLoaderSdkDir"));
    gDirectXDir = Wizard.GetTextControlValue(_T("txtDirectXSdkDir"));
    gRwD3d9Dir = Wizard.GetTextControlValue(_T("txtRwD3d9Dir"));
    return true;
}

function OnEnter_pathsSetup(forward) {
    PathsSetupSwitchComponentsForGame(gGameSA, _T("GtaSaDir"), _T("CleoSdkSaDir"));
    PathsSetupSwitchComponentsForGame(gGameVC, _T("GtaVcDir"), _T("CleoSdkVcDir"));
    PathsSetupSwitchComponentsForGame(gGameIII, _T("Gta3Dir"), _T("CleoSdk3Dir"));
    PathsSetupSwitchMoonLoader(gGameSA && gPluginType == 2); // MoonLoader Module
    PathsSetupSwitchDirectX(gDirectX);
    PathsSetupSwitchRwD3D9(gDirectX && (gGameVC || gGameIII));
}
